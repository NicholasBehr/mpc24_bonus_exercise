%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (c) 2024, Amon Lahr, Simon Muntwiler, Antoine Leeman & Fabian Fl√ºrenbrock Institute for Dynamic Systems and Control, ETH Zurich.
%
% All rights reserved.
%
% Please see the LICENSE file that has been included as part of this package.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [x_s, u_s] = compute_steady_state(params, d)

    % size(d)
    % size(A)
    % size(params.exercise.T_ref)
    % size(params.model.Cd)
    % size(params.model.Bd)
    % size(params.model.C)
    % T_ref = params.model.C_ref*params.model.C*x + params.model.C_ref*Cd*d)

    A_ss = [eye(params.model.nx) - params.model.A   ,  -params.model.B                       ;
            params.model.C_ref*params.model.C                         ,  zeros(pa,params.model.nu)];
    % disp(A_ss) // params.model.Bd*d
    b_ss = [params.model.Bd*d  ;
            params.exercise.T_ref - params.model.C_ref*params.model.Cd*d];
    % disp(b_ss)
    % b_ss = eye(6,1);
    sol = A_ss\b_ss;
    x_s = sol(1:params.model.nx);
    u_s = sol(1+params.model.nx:params.model.nu+params.model.nx);
    % x_s = eye(params.model.nx,1);
    % u_s = eye(params.model.nu,1);

end
